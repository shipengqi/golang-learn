<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>os on Golang Learning</title>
    <link>http://shipengqi.github.io/golang-learn/docs/standards/os/</link>
    <description>Recent content in os on Golang Learning</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="http://shipengqi.github.io/golang-learn/docs/standards/os/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>filepath</title>
      <link>http://shipengqi.github.io/golang-learn/docs/standards/os/filepath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shipengqi.github.io/golang-learn/docs/standards/os/filepath/</guid>
      <description>filepath#filepath 的功能和 path 包类似，但是对于不同操作系统提供了更好的支持。filepath 包能够自动的根据不同的操作系统文件路径进行转换， 通常情况下应该总是使用 filepath 包，而不是 path 包。
path/filepath 包涉及到路径操作时，路径分隔符使用 os.PathSeparator。不同系统，路径表示方式有所不同，比如 Unix 和 Windows 差别很大。
例如，在 Unix 中，路径的分隔符是 /，但 Windows 是 \。
path/filepath 能够处理所有的文件路径，不管是什么系统。注意，路径操作函数并不会校验路径是否真实存在。
解析路径名字符串#Dir() 和 Base() 函数将一个路径名字符串分解成目录和文件名两部分。（一般情况，这些函数与 Unix 中 dirname 和 basename 命令类似，但如果 路径以 / 结尾，Dir 的行为和 dirname 不太一致。）
func Dir(path string) string func Base(path string) string Dir 返回路径中除去最后一个路径元素的部分，即该路径最后一个元素所在的目录。在使用 Split 去掉最后一个元素后，会简化路径并去掉末尾的斜杠。 如果路径是空字符串，会返回 .；如果路径由 1 到多个斜杠后跟 0 到多个非斜杠字符组成，会返回 /；其他任何情况下都不会返回以斜杠结尾的路径。
Base 函数返回路径的最后一个元素。在提取元素前会去掉末尾的斜杠。如果路径是 &amp;ldquo;&amp;quot;，会返回 .；如果路径是只有一个斜杆构成的，会返回 /。</description>
    </item>
    
  </channel>
</rss>
