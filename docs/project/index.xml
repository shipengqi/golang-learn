<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>🛠️ Go 工程实践 on Go Learning</title><link>https://shipengqi.github.io/golang-learn/docs/project/</link><description>Recent content in 🛠️ Go 工程实践 on Go Learning</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://shipengqi.github.io/golang-learn/docs/project/index.xml" rel="self" type="application/rss+xml"/><item><title>项目的目录结构</title><link>https://shipengqi.github.io/golang-learn/docs/project/01_structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shipengqi.github.io/golang-learn/docs/project/01_structure/</guid><description> 项目的目录结构 # 平铺式结构 # project-layout #</description></item><item><title>Commit 规范</title><link>https://shipengqi.github.io/golang-learn/docs/project/02_commitizen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shipengqi.github.io/golang-learn/docs/project/02_commitizen/</guid><description> Commit 规范 #</description></item><item><title>版本规范</title><link>https://shipengqi.github.io/golang-learn/docs/project/03_gsemver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shipengqi.github.io/golang-learn/docs/project/03_gsemver/</guid><description>版本规范 # gsemver 是一个用 Go（Golang）开发的命令行工具，它使用 git commit 来自动生成符合 semver 2.0.0 规范的下一个版本。
安装 # $ go install github.com/arnaud-deprez/gsemver@latest 使用 # 下面的命令会使用 git commit 生成下一个 version：
gsemver bump 配置 # 你可以使用一个配置文件来定义你自己的规则。默认情况下，会寻找 .gsemver.yaml 或 $HOME/.gsemver.yaml，可以通过 --config（或 -c）选项来指定你自己的配置文件。</description></item><item><title>Git 工作流程</title><link>https://shipengqi.github.io/golang-learn/docs/project/04_flow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shipengqi.github.io/golang-learn/docs/project/04_flow/</guid><description> Git 工作流程 #</description></item><item><title>API 风格</title><link>https://shipengqi.github.io/golang-learn/docs/project/05_api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shipengqi.github.io/golang-learn/docs/project/05_api/</guid><description> API 风格 # RESTful API # RPC #</description></item><item><title>API 文档</title><link>https://shipengqi.github.io/golang-learn/docs/project/06_api_doc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shipengqi.github.io/golang-learn/docs/project/06_api_doc/</guid><description> API 文档 #</description></item><item><title>make</title><link>https://shipengqi.github.io/golang-learn/docs/project/07_make/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shipengqi.github.io/golang-learn/docs/project/07_make/</guid><description>make # 项目管理</description></item><item><title>基于 GitHub Actions 的 CI/CD</title><link>https://shipengqi.github.io/golang-learn/docs/project/08_github_actions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shipengqi.github.io/golang-learn/docs/project/08_github_actions/</guid><description>基于 GitHub Actions 的 CI/CD # 静态代码检查 # GitHub Actions 是 GitHub 为托管在 github.com 站点的项目提供的持续集成服务。
在构建持续集成任务时，我们会在任务中心完成各种操作，比如克隆代码、编译代码、运行单元测试、构建和发布镜像等。GitHub 把这些操作称为 Actions。
Actions 是可以共享的，开发者可以将 Actions 上传到 GitHub 的 Actions 市场。 一个 awesome actions 仓库，里面也有不少的 Action。如果需要某个 Action，直接引用他人写好的 Action 即可。 整个持续集成过程，就变成了一个 Actions 的组合。
Action 其实是一个独立的脚本，可以将 Action 存放在 GitHub 代码仓库中，通过 &amp;lt;userName&amp;gt;/&amp;lt;repoName&amp;gt; 的语法引用 Action。例如， actions/checkout@v2 表示 https://github.com/actions/checkout 这个仓库，tag 是 v2。
GitHub Actions 术语：
workflow：一个 .yml 文件对应一个 workflow，也就是一次持续集成。一个 GitHub 仓库可以包含多个 workflow，只要是在 .github/workflow 目录下的 .yml 文件都会被 GitHub 执行。 job：一个 workflow 由一个或多个 job 构成，每个 job 代表一个持续集成任务。 step：每个 job 由多个 step 构成，一步步完成。 action：每个 step 可以依次执行一个或多个命令（action）。 on：一个 workflow 的触发条件，决定了当前的 workflow 在什么时候被执行。 workflow 文件 # GitHub Actions 配置文件存放在代码仓库的 .</description></item></channel></rss>